python                                          js

a = 5                                       let a = 5       variable
b = 7                                       const b = 7     constant variable     

def solve(a, b):                            function solve(a, b) {
    return a + b                                return a + b;
                                            }
print(solve(5, 5))                          console.log(solve(5,5))

print(f"This is {a}")                       console.log(`This is ${a}`) <- the `` are special! (top left)

pi = 3.1415926                              const pi = 3.1415926
print(round(pi, 2))                         console.log(pi.toFixed(2))

prinf(f"{a:.2f}")                           console.log(a.toFixed(2))

escaping special characters -- same '\'

person = {'name': 'George', 'age': 5}       let person = {name: 'George', age: 5}
print(person['name'])                       console.log(person['name']) OR console.log(person.name)

is_bool = True                              let isBool = true

6 == 6   True                               6 == 6 true
6 == '6' False                              6 == '6' true    equality operator
                                            6 === 6 true
                                            6 === '6' false  identity operator (or strict equality)

3 != 3 False                                3 != 3 false
3 != '3' True                               3 != '3' false 
                                            3 !== 3 false
                                            3 !== '3' true
                                        
not True                                    !true

                                            if-else expression (or teranry operator) -> can be placed in console.log
                                            (5 > 7) ? 4 : 10
                                            if true - > first value, else -> second value 

if a == b:                                  if (a == b) {
    print(a)                                   console.log(a)
else:                                       } else {
    print(b)                                    console.log(b)
                                            }

                                            switch statements - similar to if-elif-else
                                            switch(value)
                                                case 'Ivan':
                                                    console.log('Hello Ivan');
                                                    break;
                                                case 'Dragan':
                                                    console.log('Zdrasti Drgao');
                                                    break;
                                                default:
                                                    console.log('Ne znam koi si');
                                                    break;
                                            
                                            if no BREAK -> the code will continue to execute
                                            cannot be used with bool expressions

                                            !  NOT
                                            && AND
                                            || OR

type(value)                                 typeof value



difference when checking [], {} 

array = []      

def check_if_true(value):                   function logTruthiness(value) {
    if array:                                   if (value) {
        print(True)                               console.log(true) 
    else:                                       } else {
        print(False)                               console.log(flase) 
check_if_true(array) -> False                   }
                                            }

                                            logTruthiness(array) -> true

loops

for i in range(10):                         for (let i = 0; i < 10; i++) {
    print(i)                                    console.log(i);     
                                            }

i = 0                                       let i = 0;
while i < 10:                               while (i < 0) {
    print(i)                                    console.log(i);
    i += 1                                      i++;
                                            }

ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS 

empty = []                                  let empty = [];
numbers = [1, 2, 3, 4, 5, 6]                let numbers = [1, 2, 3, 4, 5, 6];

not not [] -> False                         !![] -> true
if empty: -> False                          if (empty) {} -> true

numbers[-1] => 6                            numbers[numbers.length - 1] => 6
numbers[6] => IndexError                    numbers[6] => undefined

first, second, third = [1, 2, 3]            let [first, second, third] = [1, 2, 3]
five, six = [1, 2, 3] => ValueError         let [five, six] = [1, 2, 3] => five = 1, six = 2, finish

five, *rest = [1, 2, 3]                     let [five, ...restNumbers] = [1, 2, 3]

for num in numbers:                         for (let num of numbers) {
    print(num)                                  console.log(num)
                                            }

numbers.append(1)                           numbers.push(1)
numbers.pop()                               numbers.pop()
numbers.extend([4, 5, 6])                   numbers.push(3, 4, 5)

numbers.popleft()                           numbers.shift()
numbers.insert(0, 10)                       numbers.unshift(10)

                                            // SPLICE - removing items
                                            let numbers = [1, 2, 3, 4, 5]
                                            let deletedElements = numbers.splice(2, 1) => [1, 2, 4, 5] 
                                            deletedElements = numbers.splice(1, 2) => [1, 5]
                                            console.log(deletedElements) => [2, 4]

                                            //SPLICE - inserting items
                                            let numbers = [1, 2, 5, 6]
                                            numbers.splice(2, 0, 3, 4) -> [1, 2, 3, 4, 5, 6]

                                            //SPLICE add and remove at the same time
                                            let numbers = [1, 2, 3, 4, 5, 6]
                                            let deletedItems = numbers.splice(2, 3, 'deleted was 3, 4 and 5') 
                                            -> [1, 2, 'deleted was 3, 4 and 5', 6]

                                            console.log(deletedElements) -> [3, 4, 5]

numbers.reverse()                           numbers.reverse()

print((', ').join([str(x) for x in nums]))  console.log(numbers.join(', ))

numbers = [1, 2, 3, 4, 5, 6]                let numbers = [1, 2, 3, 4, 5, 6]
new_nums = numbers[1:3]                     let newNums = numbers.slice(1, 3)
other_nums = numbers[1:]                    let otherNums = numbers.slice(1)
copied_nums = numbers.copy()                let copiedNums = numbers.slice()


                                            //includes
1 in numbers => True                        let result = numers.includes(1) => true
4 in numbers[:2]                            numers.includes(4, 2)

                                            //get element index
letters = ['a', 'b', 'c']                   let letters = ['a', 'b', 'c']
letters.index('a') => 0                     letters.indexOf('a')
letters.index('dd') => ValueError           letters.indexOf('dd') => -1

                                            //find specific element
                                            let element = numbers.find(num => num === 3)
cars = ['BMV', 'VW', 'Toyota']              let cars = ['BMV', 'VW', 'Toyota']
list(filter(lambda x: x[0] == 'B', cars))[0]  === cars.find(car => car[0] === 'B')
lambda function ============================= arrow function

                                            cars.forEach(car => console.log(car))

                                            //map
numbers = [1, 2, 3, 4, 5]                   let numbers = [1, 2, 3, 4, 5]
double_numbers = list(map(lambda x: x * 2, numbers))    doubleNumbers = numbers.map(x => x * 2)


                                            //filter
odd_numbers = list(filter(lambda x: x % 2 == 1, numbers))   oddNumbers = numbers.filter(x => x % 2 === 1)

                                            //reduce
                                            numbersSum = numbers.reduce((sum, num) => sum + num, 0)

STRINGS STRINGS STRINGS STRINGS STRINGS STRINGS STRINGS STRINGS STRINGS STRINGS STRINGS STRINGS 

string = "I love Python and Java"           let string = "I love Python and Java"
index = string.index('love')                let index = string.indexOf('love')
                                            let lastIndex = string.lastIndexOf('love') -> last string in the text
                                            
                                            //substring
                                            string.substring(index, index + 4) => 'love'

                                            //replace

                                            //split

                                            //includes

                                            //repeat
print('*' * 4)                              console.log('*'.repeat(4))
                                            
                                            //trim

                                            //startsWith, endsWith

                                            //padStart, padEnd
                                            console.log('10'.padStart(8, 'x')) -> 8 is TOTAL CHARS

REGEX REGEX REGEX REGEX REGEX REGEX REGEX REGEX REGEX REGEX REGEX REGEX REGEX REGEX REGEX REGEX REGEX 

                                            //literal
                                            let literal = /regex pattern/
                                            let string = "I love Python and Java, love love..."

                                            let pattern = /Java,/i

                                            //function constructor
                                            let patten2 = new RegExp('Java,', 'i')

                                            //test pattern
                                            pattern.test(string)

                                            //exec
                                            pattern.exec(string)

                                            //string methods -> ALL and ABOVE with g flag returns ALL ITEMS
                                            string.match(pattern)
                                            string.matchAll(pattern) -> iterator 

                                            //replace
                                            let string = "I love Python and Java, love love..."
                                            let newPattern = /love/g
                                            string.replace(newPattern, 'hate')

                                            

FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS 

                                            //function declaration (statement)
                                            //the function is ready to be called/invoked

                                            function funcName(params) {
                                                function-> body
                                            }

                                            invoke -> funcName()


                                            //function expression -> calling the func in expression
                                            //directly will return the result into the variable
                                            //does not need to specify name of the func (anonymous)
                                            //or with name, but it will not be used to call the function.
                                            //Used mainly for debugging
                                            
                                            const someVar = function(params) {
                                                function-> body
                                            }

                                            //arrow function - anonymous function, expression
                                            const someVar = () => do-some-logic;

                                            invoke -> someVar()

                                            //default return value - undefined

OBJECT & CLASSES OBJECT & CLASSES OBJECT & CLASSES OBJECT & CLASSES OBJECT & CLASSES OBJECT & CLASSES

                                            //creating empty object
                                            let person = {}
                                            let person = {name: 'Pesho', age: 20}

                                            // accessing props
                                            person.name
                                            person['name']

                                            /adding
                                            let anmal = {}
                                            animal.name = 'Ivancho'

                                            //dynamically assign props - using variables
                                            let propName = 'type'
                                            animal[propName] = 'Cat'

                                            const dynamicPropName = 'fullName'
                                            const person3 = {
                                                [dynamicPropName] = 'Ivan Ivanov'
                                            }

                                            //METHODS 
                                            //define method in object literal
                                            const dog = {
                                                name: 'Jara',
                                                breed: 'Chihua'
                                                age: 2,
                                                grades = [6, 6, 5],
                                                owner = {
                                                    name: 'Stan',
                                                    age: 42,
                                                },
                                                //can use expression or arrow function
                                                makeSound: function() {
                                                    console.log('Meou...')
                                                }

                                            }

                                            //calling method
                                            let methodName = 'makeSound'
                                            cat.makeSound()
                                            cat.['makeSound']()
                                            cat.[methodName]()

                                            cat.eat = function() {
                                                console.log('Cat eat...')
                                            }
                                            cat.eat2 = () => console.log('eat 2')

                                            //method notation syntax
                                            const cat = {
                                                name: 'cat',
                                                makeSound() = {
                                                    console.log('SOunding method notation')
                                                }
                                            }

                                            //get all property names of an object
                                            let propertyNames = Object.keys(cat)
                                            //values
                                            Object.values(cat)

                                            /kvp
                                            let entries = Object.entries(cat) -> [Array(2), Array(2) .... ] each array kvp

                                            /passing kvp as list of arrays to construct an object
                                            let obj = Object.fromEntries(entries)

JSON JSON JSON JSON JSON JSON JSON JSON JSON JSON JSON JSON JSON JSON JSON JSON 
                                            //convert JS object to JSON

                                            convertedObj = JSON.stringify(obj)

                                            //convert JSON to JS object
                                            convertJson = JSON.parse(convertedObj)

DICTIONARY DICTIONARY DICTIONARY DICTIONARY DICTIONARY DICTIONARY DICTIONARY DICTIONARY 

                                            let phoneBooke = {
                                                'Ivan': '0887123456',
                                                'Dragan': '0887212245',
                                                'Petkan': '0887121321',
                                            }

                                            //check item in DICTIONARY
                                            if (phoneBook['Ivan']) {

                                            }
                                            if (phoneBook.hasOwnProperty('Ivan')) {

                                            }

                                            //del item
                                            delete phoneBook['Ivan']

                                            for (let name in phoneBook) { 

                                            }

                                            //sorting
                                            let result = Object
                                                            .entries(phoneBook)
                                                            .sort((a, b) => a[0].localeCompare(b[0])) -> makeing it array
                                            
                                            Object.fromEntries(result) -> transfer back to object

CLASS CLASS CLASS CLASS CLASS CLASS CLASS CLASS CLASS CLASS CLASS CLASS CLASS CLASS CLASS CLASS CLASS 

                                            class Student {
                                                constructor(firstName, lastName) {
                                                    this.firstName = firstName;
                                                    this.lastName = lastName;
                                                }

                                                greet(to) {
                                                    console.log(`${this.firstName} says hello to ${to}`)
                                                }
                                            }

                                            //initialize object
                                            const studetn = new Student('Peshp', 'Ivanov')